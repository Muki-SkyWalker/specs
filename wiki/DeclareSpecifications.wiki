#summary How to structure your specifications

 * [http://code.google.com/p/specs/wiki/DeclareSpecifications#Declare_a_specification Declare a specification]
 * [http://code.google.com/p/specs/wiki/DeclareSpecifications#Systems_under_specification Systems under specification]
 * [http://code.google.com/p/specs/wiki/DeclareSpecifications#Call_a_function_before_or_after_each_example Call a function before or after each example]
 * [http://code.google.com/p/specs/wiki/DeclareSpecifications#Call_a_function_before_or_after_each_system_or_specification Call a function before or after each system or specification]
 * [http://code.google.com/p/specs/wiki/DeclareSpecifications#Contexts Contexts]
 * [http://code.google.com/p/specs/wiki/DeclareSpecifications#Compose_specifications Compose specifications]
 * [http://code.google.com/p/specs/wiki/DeclareSpecifications#Share_examples Share examples]
 * [http://code.google.com/p/specs/wiki/DeclareSpecifications#Specify_an_example Specify an example]
 * [http://code.google.com/p/specs/wiki/DeclareSpecifications#Sequential_execution Sequential execution]

=Declare a specification=
You can declare a new specification by extending the Specification class:
{{{
import org.specs._

object newSpecification extends Specification {
}
}}}

A specification is composed of:

 * simple examples as in the [http://code.google.com/p/specs/wiki/QuickStart QuickStart example]
 * systems specifications containing examples. A system specification is used to describe the context or the usage for a list of examples.
 * other specifications (see [http://code.google.com/p/specs/wiki/DeclareSpecifications#Compose_specifications Compose a specification])

The name of the specification is the name of the specification object by default but you can use a more meaningful name like this:
{{{
import org.specs._
object newSpecification extends Specification("My new Specification") {
}
}}}

=Systems under specification=

You specify systems by simply adding a description followed by the method `should`:
{{{
import org.specs._

object newSpecification extends Specification {
 "my system" should {...}
}
}}}

Then, when you will execute the specification, you will see displayed:
{{{
my system should
...rest of the specification
}}}

===Alias for the should keyword===
You can declare several system in a specification. In that case you can, for instance, specify the main functionalities of your system using a `should` method and add another section using ,,can,, for advanced features:
{{{
"For power users, my system" can {...}
}}}

===Extend the should verb===

At times, some words can be repeated at the beginning of each example:
{{{
  "The project helpers" should {
    "provide this function" in { ... }
    "provide that function" in { ... }
    "provide this other function" in { ... }
  }
}}}

You can factor out the "provide" word by adding a new function:
{{{
  def provide(e: =>Example) = { currentSut.verb += " provide"; e }

  "The project helpers" should provide {
    "this function" in { ... }
    "that function" in { ... }
    "this other function" in { ... }
  }
}}}

===Without implicit defs===
If you don't want to use Scala's implicit defs for the String class, you can also use:

{{{
declare("my system") should {...}
}}}

==Call a function before or after each example==

This is called setup and teardown in the JUnit world. Although this is contreversial (see [http://jamesnewkirk.typepad.com/posts/2007/09/why-you-should-.html here] for example), you can do it with *specs*, by using `doBefore` and `doAfter`:
{{{
"my system" should { doBefore { resetTheSystem }
  "mess up the system" in {...}
  "and again" in {...}
}
}}}

_Note_: you can also use syntactic sugar and write:
{{{
"my system" should { resetTheSystem.before
...
}}}
_Note_: `Contexts` (see below) can also be used to specify before/after actions

==Call a function before or after each system or specification==
*(from 1.3.2)*

In addition to the capacity to setup/teardown each example, it is also possible to do a system-wide setup/teardown with the following functions:

{{{
"my system" should { 
  doFirst { prepareTheSystem }  // alias: prepareTheSystem.doFirst
  
  "execute this" in {...}
  "and that" in {...}

  doLast { cleanUp } // alias: cleanUp.doLast
}
}}}

And more globally, before and after executing the specification for several systems, it is also possible to setup/teardown the environment:

{{{
object mySpec extends Specification { 
  doBeforeSpec { prepareTheWholeEnvironment } // alias: prepareTheWholeEnvironment.beforeSpec
  
  "my system" should { 
    doFirst { prepareTheSystem }
    "execute this" in {...}
    "and that" in {...}
    doLast { cleanUp }
  }

  doAfterSpec { cleanupTheWholeEnvironment } // alias: cleanUpTheWholeEnvironment.afterSpec

}}}

_Note_: doBefore/doAfter or doFirst/doLast declarations can be placed anywhere inside a system, similarly doBeforeSpec and doAfterSpec can be placed anywhere in the spec declaration.

=Contexts=

You may want sometimes to identify more precisely the `Context` of a system under specification, either to give it a meaningful name or to reuse it across specifications. To do this, you need to create `Context` objects:
{{{
object StackSpecification extends Specification {
  val empty = beforeContext(stack.clear)
  val full = beforeContext(createStack(stack.capacity))
  val nonEmpty = beforeContext(createStack(3))
  val belowCapacity = beforeContext(createStack(3))
...
}
}}}

The `beforeContext`, `afterContext`, `context` methods are factory methods to create `Context` objects:
{{{
def context(b: =>Any, a: =>Any) = new Context { before(b); after(a) }
}}}

`Context` objects are passed to system under specification to specify the before/after actions.

Then, you can reuse contexts with the `->-` operator: 
{{{
  "A full stack" ->-(full) should { 
  ...
  }
  "A empty stack" ->-(empty) should { 
  ...
  }
}}}

*(from 1.3.2)*

Global context setup and teardown can also be created with the following methods:
{{{
  val stackContext  = globalContext(createStack, deleteStack)
  val stackContext2 = new Context { first(createStack) }
  val stackContext3 = new Context { last(deleteStack) }
}}}

==Repeated examples==

If you want to repeat the same examples with different data until a condition is true, you can use the `until` method:
{{{
  "This system" should {
    var counter = 1
    doAfter(counter += 1)
    until(counter == 3)

    "pass the example with an int value" in { counter must_> 0 }
  }
}}}

This method is also available on `Context` objects, so you can write:
{{{
  val stack = new Stack(1) // stack size is 1
  val stacks = afterContext(stack.size += 1).until(stack.size == 10)
  "A non-empty stack" ->-(stacks) should { 
  ...
  }
}}}

=Specify an example=
You specify an example of what your system is supposed to do by adding a description inside a specified system followed by the method `in`:
{{{
"my System" should {
  "be wonderful" in {...}
  "be elegant" in {...}
}
}}}

===Alias for the in keyword===
If you don't like the `in` keyword, you can replace it with the meaningless operator ,,>>,,:
{{{
"my System" should {
  "be wonderful" >> {...}
}
}}}

===Sub examples===
It also is possible to nest examples where it makes sense. For instance:
{{{
"The Scala language" should {
  "provide a && operator" >> {
    "returning true for true && true" >> { true && true must beTrue } 
    "returning false for true && false" >> { true && false must beFalse } 
    "returning false for false && true" >> { true && false must beFalse } 
    "returning false for false && false" >> { false && false must beFalse } 
  }
}
}}}

===Without implicit defs===
You can also specify an example without using implicits defs:
{{{
declare("my System") should {
  forExample("be wonderful") in {...}
}
}}}

==Anonymous examples==

Example descriptions are not even necessary to create a specification:
{{{
object expectationsOnly extends Specification("Hello world") with JMocker {
  "hello world".size mustBe 11
  3 must_== { "abc".size }
  classOf[java.io.OutputStream].expectsOne(_.flush) in { _.flush }
}
}}}

The 3 assertions above will create new examples: example, example 2, example 3

=Compose specifications=

Big specifications can be cut in several sub-specifications:
{{{
object bigSpec extends Specification {
  "this big specification".isSpecifiedBy(
                  basicFunctionalitiesSpec,
                  advancedFunctionalitiesSpec,
                  extensionsSpec)
}
}}}

Alternately, when it makes sense, you can also use `areSpecifiedBy` instead of `isSpecifiedBy`.

When executed, a composed specification will display its results with each sub-specification results being indented:
{{{
  this big specification isSpecifiedBy
    the system basic functionalities are
       the system should
         + say hello
         + say hello world
    the system advanced functionalities are
      ...
}}}

===Change the specification description===

By default the description of a specification, which is displayed in case of a composed specification, is the class name of the specification object (without any `$`).
If you want to set a more meaningful name, you need to override the description attribute:
{{{
object basicFunctionalitiesSpecification extends Specification {
  override var description = "the system basic functionalities are"
}
}}}

=Share examples=

If you want to share examples between systems specifications, you can:

 * define a method returning examples:
{{{
def sharedFunctionalities = {
  "provide functionality 1" in {...}   
  "provide functionality 2" in {...}   
}
}}}

 * use this method inside another example:
{{{
"my system" should {
  "provide common functionalities" in { sharedFunctionalities }
}
}}}

You can also reuse all the examples of another system under specification with the `behave like` declaration:
{{{
"A full stack" ->-(full) should { 
  // you can reference the other system under spec by name
  behave like "A non-empty stack below full capacity" 

  // or directly if you saved it in a val
  behave like nonEmptyStackBelowCapacity 
  ...
}
}}}

=Sequential execution=

By default, the execution mode of examples of a Specification is "on demand". The examples are only executed when a Runner requests the number of failures or errors. This enables a runner to do a concurrent execution of examples. 

However, if you need to execute samples sequentially (as in a [http://code.google.com/p/specs/wiki/LiterateSpecifications literate specification]), you can use the method `setSequential`:

{{{
object mySpec extends Specification {
  "The first functionality" should { setSequential

    "have example 1 execute first" in {...}
    // example 2 uses the results of example 1
    "have example 2 execute in second" in {...}
  }
}
}}}