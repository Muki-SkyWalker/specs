#summary Notable changes to specs releases
#labels Featured
||_to be released_|| *specs* 1.3.2 || Fixed an issue with the equalIgnoreSpace xml matcher not matching properly Text and Atom nodes.||
||7/21/2008|| *specs* 1.3.1 ||Fixed an issue with the equalIgnoreSpace xml matcher not matching text inside nodes. Added [http://code.google.com/p/specs/wiki/RunningSpecs#Include_or_exclude_examples tags] to include and exclude examples from specs at execution time (can be used from the command line with `--accept and --reject`). Integrated tags with groups when using `ScalaTest`. Enhanced the Literate Specifications (Renamed Literal to Literate). Fixed a display issue with `ScalaCheck`.||
||6/20/2008|| *specs* 1.3.0 ||Added [http://code.google.com/p/specs/wiki/DeclareSpecifications#Repeated_examples repeat] capability to [http://code.google.com/p/specs/wiki/DeclareSpecifications#Contexts contexts]. Fixed the JUnit runner so that errors and failures can be distinguished. Prototyped a lightweight [http://incubator.apache.org/buildr/ buildr] [http://specs.googlecode.com/files/specs-buildr-1.2.9.rar integration]. [http://code.google.com/p/specs/wiki/DeclareSpecifications#Anonymous_examples Anonymous examples] get better naming when a spec only contains assertions. Added [http://code.google.com/p/specs/wiki/UsingJMock#One_liners One liner methods] for JMock expectations and mock usage. [http://code.google.com/p/specs/w/edit/MatchersGuide#Detailed_differences detailedDiffs] shows the differences between 2 Strings using the [http://en.wikipedia.org/wiki/Levenshtein_distance Levenshtein distance]. Fixed issue 29. New class matchers `haveClass`, `haveSuperClass`, `beAssignableFrom`. Added [http://code.google.com/p/specs/wiki/UsingJMock#Capturing_parameters_for_returned_values capturingParameters] to be able to capture the value of one of the passed parameters on a mocked method and return it as a stub value. Added `a[T]` as [http://code.google.com/p/specs/wiki/UsingJMock#Method_parameters JMock parameter] to allow only some parameters to be matched on a mocked method. Fixed the timer reporting in the console.||
||5/27/2008|| *specs* 1.2.9 ||Reworked the [http://specs.googlecode.com/svn/trunk/src/test/scala/org/specs/samples/stackSpec.scala stackSpec] example. Added syntactic sugar for doBefore: `createObjects.before` and allowed its use when no sut is declared like in the helloWorld example. Fixed the `-ns` option. Added [http://code.google.com/p/specs/wiki/DeclareSpecifications#Contexts contexts]. Expectations can be flagged as assertions in the JMock specs with [http://code.google.com/p/specs/wiki/UsingJMock#Counting_assertions isAssertion]||
||5/24/2008|| *specs* 1.2.8 ||Genericized the `DataTables` so that 2 rows with conforming types can be chained (`1 ! 2 | 1 ! true` has type `Int, Any`). Specifications can be created with a name: `object helloWorld extends Specification("Hello World")`. Added a `haveSize` matcher for collections. Fixed `org.specs.allRunner` which should be an object. Added an `equalIgnoreSpace` matcher for Strings. Fixed the JUnit runner when using a skip inside a system under test. Added some `FileMatchers`. Added a `-ns` or `--nostacktrace` option to the `ConsoleRunner` to remove stacktraces from the console output. Defined a reusable `SpecsMatchers` trait to be able to reuse specs matchers outside of a specification. Added a `fail` method with no arguments. Added a isAssertion method to count one more assertion on mock expectations||
||5/8/2008|| *specs* 1.2.7 ||Set the System.exit code when using the `ConsoleRunner` (issue 17). Separated Scalacheck as a distinct trait (breaks existing code using Scalacheck). Removed 2.7.1 deprecation warnings. Added a main method in the Specification class to be able to execute it more easily (issue 15). Specifications can be included with the `include` method (alias of `isSpecifiedBy`, issue 18). Added a xUnit trait with xUnit-like assertions ||
||5/6/2008|| *specs* 1.2.6 || Recompiled to work with Scala 2.7.1. Added a new String matcher: `"lallbl" must find("l(.*?)l").withGroups("a", "b")`. Added 2 new matchers to check if values are null or None at the same time: `beAlsoNull` and `beAlsoNone`. Added some support to compose matchers in order to match object graphs (see the wiki).||
||3/7/2008|| *specs* 1.2.5 || Compatibility with the _real_ final Scala 2.7.0. Added an exception when a doBefore/After clause is not specified a "should". Corrected a bug with doAfter. Corrected a match error with the scalacheck matcher||
||2/28/2008|| *specs* 1.2.4 || Compatibility with Scala 2.7.0. Some scaladoc on support classes ||
||2/11/2008|| *specs* 1.2.3 || Provided a [http://www.artima.com/scalatest ScalaTest] runner. The examples are now executed only when the specification status (errors / failures) is requested. Refactored the runners so that a single class declaration can support several of them (`class myRunner extends Runner(mySpec) with JUnit with Console`). Fixed issue 9 with JUnit4. Deprecated the JUnit3 runner for JUnit4 as this is the only supported runner for JUnit. Removed the SpecsJUnitRunner java class which is not useful as JUnit4 specs can be launched directly from Eclipse. Provided a convenience JMocker object to allow the use of JMock in Scala projects without using Specifications. Fixed issue 10 and simplified the implicit defs for Assert objects (Assert object "must",...) ||
||1/28/2008|| *specs* 1.2.2 || deprecated the `usingBefore/After` methods using a parameterless function for some simpler methods `doBefore/After` just taking a block of code. Added a `WaitFor` trait to wait during an example. Fixed issue 7||
||1/25/2008|| *specs* 1.2.1 || lifted the typing restriction on the `be_==` matcher (introduced in 1.1.5) and added a new beEqual matcher which constrains both values to have compatible types. This still leaves one typing issue for the beEqual matcher on Iterables. See [http://code.google.com/p/specs/wiki/MatchersGuide#Matchers_applicable_to_any_object here]||
||1/23/2008|| *specs* 1.2 || jMock can now be used to create mocks and define expectations - see the [http://code.google.com/p/specs/wiki/UsingJMock wiki]. 2 matchers have been added for !PartialFunctions: beDefinedAt and beDefinedWith||
||1/11/2008|| *specs* 1.1.5 || you can now skip examples or a whole system under test - see the [http://code.google.com/p/specs/wiki/RunningSpecs#Skip_examples wiki]||
||1/5/2008||*specs* 1.1.4. ||corrected a bug involving multiple evaluation of an expression to be tested. In a mustBe b, a was evaluated 3 times. ||
||1/3/2008||*specs* 1.1.3. ||the specs declared as a JUnit3 !TestSuite can now be executed with JUnit4. The consequence is that specs now depends on JUnit-4.4||
||12/31/2007||*specs* 1.1.2. ||passes the test suite using Maven and is uploaded in scala-tools.org || 
||12/24/2007||*specs* 1.1.1. ||now fully compatible with scalacheck 1.1.1. || 
||12/21/2007||*specs* 1.1. ||xml matchers, xml runner, data tables, literate specifications and package renaming from scala.specs to org.specs|| 