#summary Specifications for threads.

= Introduction =

*specs* integrates the work from Josh Cough on specifying threads behaviour as described on [http://jackcoughonsoftware.blogspot.com/2009/07/testing-multi-threaded-scala-code.html his blog].

In order to specify how several threads are competing for resources, you will use the `Threads` trait:

{{{
import org.specs._
import org.specs.matcher.concurrent._
import java.util.concurrent.locks._

class ThreadSpec extends SpecificationWithJUnit with Threads {
  val lock = new ReentrantReadWriteLock

  "this system" should {
    thread("reader thread") { 
      lock.read { 
        waitForBeat(2) 
      }
    }
    thread("writer thread") {
      waitForBeat(1)
      lock.write { 
        "the beat must advance" in { beat must_== 2 }
      }
    }
  }
}
}}}
 
= Threads creation =

Threads are created with the `thread` method. Those declarations must take place in a System Under Specification.

There are several variants that are usable to create threads:

 * `thread`: with no string description, creates an anonymous thread.
 * `thread(name)`: to create a named thread 
 * `5.threads`: create 5 anonymous threads
 * `5.threads(name)`: create 5 threads named `name(i)` where `i` is the thread number
 * `thread(runnable)`: to create a thread with a runnable object
 * `thread(name, runnable)`: to create a named thread with a runnable object
 * `thread(callable)`: to create a thread with a callable object
 * `thread(name, callable)`: to create a named thread with callable object

= Expectations =

Typically, the threads will be verified using the clock beat, available via the `beat` method. You can create examples to set up expectations about that beat:
{{{
  "the beat must advance" in { beat must_== 2 }
}}}

= Debugging =

The threads Conductor provides extensive logging traces for the specified threads. `enableLogging` and `disableLogging` can be used to turn on and off the console logs.