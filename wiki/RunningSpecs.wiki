#summary How to execute specifications

=Run your specification in the Console=

To execute your specification in a Console you need to use the `ConsoleRunner` class:
{{{
import org.specs.runner.ConsoleRunner

object mySpecRunner extends ConsoleRunner(mySpec)
object mySpec extends Specification { ... }
}}}

===Find specifications in a directory path===

You can use the SpecsFinder class to find specifications in a given path:
{{{
object displaySpecifications extends SpecsFinder with Application {
  // print all specifications contained in subdirectories of the project directory
  // whose names are matching "all.*"
  specificationNames("project/**/*.scala", "all.*") foreach { println(_) }
}
}}}

To be more specific, the name of the specification will be retrieved if the scala file contains:
{{{
\\s*object\\s*(" + pattern + ")\\s*extends\\s*.*Spec.*\\s*\\{"
}}}

===Execute specifications in a directory path===

You simply use the `SpecsFileRunner`, with the parameters required for the `SpecsFinder`:
{{{
import org.specs.runner.SpecsFileRunner

object allSpecsRunner extends SpecsFileRunner("project/**/*.scala", "all.*")
}}}
 
The `SpecsFileRunner` will find possible specification names with the `SpecsFinder` and will try to instantiate them, keeping them only if the resulting object is an instance of `Specification`.

===How to redirect the results on a different output===

If you want to redirect the result of the execution to a file for example, you have to create a new trait extending the `Output` trait:
{{{
trait FileOutput extends Output {
  def println(m: Any) = {...}
  def printf(format: String, args: Any*) = {...}
  def flush() = {...}
}
}}}

And then you "mix" it with the `ConsoleRunner`:
{{{
object mySpecRunner extends ConsoleRunner(mySpec) with FileOutput
object mySpec extends Specification { ... }
}}}

=Run your specification with JUnit3=

To execute your specification with JUnit3, you need to use the `JUnit3` class:
{{{
import org.specs.runner.JUnit3

class mySpecTest extends JUnit3(mySpec)
object mySpec extends Specification { ... }
}}}

The name of the test class will be <package name>.mySpecTest

=Run your specification with JUnit3 in Eclipse=

If you want to execute the JUnit test cases using Eclipse, you have first to create a Java project referencing your Scala project. Then you can use the following JUnit test class to run your JUnit spec:
{{{ 
package test;
import junit.framework.*;

public class SpecsJUnitRunner extends TestCase {
	public static Test suite() {
		final String suiteClassName = System.getProperty("spec");
		try {
			Class<?> suiteClass = Thread.currentThread().getContextClassLoader().loadClass(suiteClassName);
			TestSuite testSuite = (TestSuite) suiteClass.newInstance();
			return (testSuite);
		} catch (InstantiationException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		return null;
	} 

}
}}}

You have to run the SpecsJUnitRunner class with the name of your spec as an argument: {{{-Dspec=org.scala.specs.mySpecTest}}}

=Run your specifications with JUnit3 and Maven =

You need to respect the surefire plugin naming convention:
{{{
// all JUnit3 tests must end with "Test"
// it must be a class, not an object, otherwise the class name would be mySpecTest$
class mySpecTest extends JUnit3(mySpec)
object mySpec extends Spec
}}}

=Run your specification with JUnit3 and Ant=

You can use the following Ant build file as a starter to compile and execute your specs as JUnit tests:
{{{
<project name="MyFirstSpecsProject" default="test" basedir=".">
  <description>sample build file</description>
  <!-- 1. Define common properties. Change the paths according to your installation -->
  <property name="src.dir" value="src/main/scala" />
  <property name="src.test.dir" value="src/test/scala" />
  <property name="build.dir" value="target/classes" />
  <property name="lib.dir" value="lib" />
  <property name="repository.home" value="c:/local_repository" />
  <property name="scala-compiler.jar"
  value="${repository.home}/org/scala-lang/scala-compiler/2.6.1/scala-compiler-2.6.1.jar" />
  <property name="scala-library.jar"
  value="${repository.home}/org/scala-lang/scala-library/2.6.1/scala-library-2.6.1.jar" />
  <!-- 2. Define Scala CLASSPATH. -->
  <path id="scala.classpath">
    <pathelement location="${scala-compiler.jar}" />
    <pathelement location="${scala-library.jar}" />
  </path>
  <!-- 3. Define project CLASSPATH. -->
  <path id="project.classpath">
    <path refid="scala.classpath" />
    <pathelement location="${build.dir}" />
    <pathelement location="${repository.home}/junit/junit/3.8.1/junit-3.8.1.jar" />
    <pathelement location="${repository.home}/org/specs/specs/1.1.1/specs-1.1.1.jar" />
    <pathelement location="${repository.home}/org/scalacheck/scalacheck/1.1.1/scalacheck-1.1.1.jar" />
  </path>
  <!-- 4. Define scala compiler command. -->
  <taskdef resource="scala/tools/ant/antlib.xml">
    <classpath refid="scala.classpath" />
  </taskdef>
  <!-- 5. Compiles sources by using "scalac" command. -->
  <target name="compile">
    <mkdir dir="${build.dir}" />
    <scalac srcdir="${src.dir}" destdir="${build.dir}" classpathref="project.classpath" force="changed">
      <include name="**/*.scala" />
    </scalac>
  </target>
  <target name="test-compile">
    <mkdir dir="${build.dir}" />
    <scalac srcdir="${src.test.dir}" destdir="${build.dir}" classpathref="project.classpath" force="changed">
      <include name="**/*.scala" />
    </scalac>
  </target>

  <!-- 6. Execute the specs as junit tests. -->
  <target name="test" description="execute the tests">
    <junit haltonfailure="true" showoutput="true">
      <classpath refid="project.classpath" />
      <formatter type="brief" usefile="false" />
      <batchtest fork="yes">
        <fileset dir="${build.dir}">
          <include name="**/*Test.class" />
          <exclude name="**/All*Test.class" />
        </fileset>
      </batchtest>
    </junit>
  </target>
  <taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" />
</project>
}}}
(the initial compile script comes from [http://scriptlandia.blogspot.com/2007/04/how-to-compile-and-run-scala-program.html this blog post])


=Run your specifications and get the results as an XML file =

You can use the XmlRunner class to export the results of your specifications as an xml file:
{{{
object specResults extends XmlRunner(extendedThrowableUnit)
}}}

This will create a file named extendedThrowableUnit.xml in the current directory: 
{{{
<spec errors="0" description="extendedThrowableUnit" failures="0" assertions="1" name="extendedThrowableUnit">
  <sut errors="0" description="an extended Throwable" failures="0" assertions="1">
    <example errors="0" description="provide a location method extracting the name of the file and the line from an exception" failures="0" assertions="1"></example>
  </sut>
</spec>
}}}

and display:
{{{
Specification "extendedThrowableUnit"
  an extended Throwable should
  + provide a location method extracting the name of the file and the line from an exception

Total for specification "extendedThrowableUnit":
Finished in 0 second, 16 ms
1 example, 1 assertion, 0 failure, 0 error
}}}

It is also possible to specify the output directory with:
{{{
object specResults extends XmlRunner(extendedThrowableUnit, "./target/reports/specs")
}}}