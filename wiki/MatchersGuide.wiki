#summary to be finished...

=Matchers presentation=

There are different kind of matchers which are used to assert that some properties must be verified. Generally they are used like this:

{{{
"This example presents a matcher" in {
  // myObjectOfTypeT is an object of type T
  // verifyThisMatcherWith is a Matcher[T]
  myObjectOfTypeT must verifyThisMatcherWith(value)
}
}}}

=Create your own Matcher=

Creating a new Matcher is easy. You extend the `AbstractMatcher` class and implement the `apply` method:

{{{
class CustomMatcher extends AbstractMatcher {
  // the apply method must return a Tuple[Boolean, String, String]
  def apply[T](v: T) = (booleanFunction(v), "okMessage", "koMessage")
}
}}} 

=Matchers applicable to any object=

 * `a must be(b)` is ok if `a eq b` (alias: `a mustBe b`)
 * `a must notBe(b)` is ok if `!(a eq b)` (alias: `a must notEq(b)`)
 * `a must be_==(b)` is ok if `a == b` (alias: `a must_== b`)
 * `a must be_!=(b)` is ok if `a != b` (alias: `a must_!= b`)
 * `a must beIn(iterable)` is ok if `iterable.exists(_ == a)`
 * `a must notBeIn(iterable)` is ok if `!iterable.exists(_ == a)`
 * `a must beEmpty` is ok if `a` defines a `isEmpty` function and `a.isEmpty`


This page will present all different matchers:
  * matchers for any object like `be_==`
  * matchers for strings
  * matchers for iterables (collections)
  * matchers for numerics
  * matchers for Options (Scala-specific)
  * Scalacheck matchers
  * pattern matchers
 
 